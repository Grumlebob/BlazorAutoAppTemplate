@page "/movies"

@inject IMoviesApi Movies
@inject NavigationManager Nav
@inject PersistentComponentState AppState

<h1>Movies</h1>

<p>rendermode: @RendererInfo.Name</p>

<button class="btn btn-primary" @onclick="GoToCreate">Add Movie</button>

@if (_loading)
{
    <p>Loading...</p>
}
else if (_error is not null)
{
    <p class="text-danger">@_error</p>
}
else
{
    <table class="table">
        <thead>
            <tr>
                <th>Title</th>
                <th>Director</th>
                <th>Rating</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
        @foreach (var m in _movies)
        {
            <tr>
                <td>@m.Title</td>
                <td>@m.Director</td>
                <td>@m.Rating</td>
                <td>
                    <a class="btn btn-sm btn-outline-primary" href="@($"/movies/{m.Id}")">View</a>
                    <button class="btn btn-sm btn-secondary" @onclick="() => GoToEdit(m.Id)">Edit</button>
                    <button class="btn btn-sm btn-danger" @onclick="() => DeleteAsync(m.Id)">Delete</button>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private bool _loading = true;
    private string? _error;
    private List<Movie> _movies = [];
    private const string CacheKey = "Movies_Index_List";

    protected override async Task OnInitializedAsync()
    {
        if (AppState.TryTakeFromJson<GetMoviesResponse>(CacheKey, out var cached) && cached is not null)
        {
            _movies = cached.Movies ?? [];
            _loading = false;
            return;
        }
        await LoadAsync();
        AppState.RegisterOnPersisting(async () =>
        {
            AppState.PersistAsJson(CacheKey, new GetMoviesResponse { Movies = _movies });
            await Task.CompletedTask;
        });
    }

    private async Task LoadAsync()
    {
        _loading = true;
        _error = null;
        try
        {
            var res = await Movies.GetAsync(new GetMoviesRequest());
            _movies = res.Movies;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task DeleteAsync(int id)
    {
        try
        {
            var success = await Movies.DeleteAsync(new DeleteMovieRequest { Id = id });
            if (success) await LoadAsync();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private void GoToCreate() => Nav.NavigateTo("/movies/create");
    private void GoToEdit(int id) => Nav.NavigateTo($"/movies/edit/{id}");
}
