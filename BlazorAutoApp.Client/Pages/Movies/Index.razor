@page "/movies"

@inject IMoviesApi Movies
@inject NavigationManager Nav
@inject PersistentComponentState AppState

<h1 class="text-2xl font-semibold mb-2">Movies</h1>

<p class="text-sm text-gray-500 mb-3">rendermode: @RendererInfo.Name</p>

<button class="inline-flex items-center rounded-md bg-blue-600 px-3 py-2 text-sm font-medium text-white shadow-sm hover:bg-blue-700" @onclick="GoToCreate">Add Movie</button>

@if (_loading)
{
    <p>Loading...</p>
}
else if (_error is not null)
{
    <p class="text-red-600">@_error</p>
}
else
{
    <div class="mt-3 overflow-x-auto border border-gray-200 rounded">
        <table class="min-w-full text-sm">
            <thead class="bg-gray-50">
                <tr class="text-left text-gray-700">
                    <th class="px-3 py-2 font-medium">Title</th>
                    <th class="px-3 py-2 font-medium">Director</th>
                    <th class="px-3 py-2 font-medium">Rating</th>
                    <th class="px-3 py-2 font-medium">Actions</th>
                </tr>
            </thead>
            <tbody class="divide-y divide-gray-100">
            @foreach (var m in _movies)
            {
                <tr class="hover:bg-gray-50">
                    <td class="px-3 py-2 text-gray-900">@m.Title</td>
                    <td class="px-3 py-2 text-gray-900">@m.Director</td>
                    <td class="px-3 py-2 text-gray-900">@m.Rating</td>
                    <td class="px-3 py-2">
                        <a class="inline-flex items-center rounded-md border border-blue-600 px-2.5 py-1.5 text-xs font-medium text-blue-700 hover:bg-blue-50 mr-2" href="@($"/movies/{m.Id}")">View</a>
                        <button class="inline-flex items-center rounded-md border border-gray-400 px-2.5 py-1.5 text-xs font-medium text-gray-700 hover:bg-gray-50 mr-2" @onclick="() => GoToEdit(m.Id)">Edit</button>
                        <button class="inline-flex items-center rounded-md border border-red-600 px-2.5 py-1.5 text-xs font-medium text-red-700 hover:bg-red-50" @onclick="() => DeleteAsync(m.Id)">Delete</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}

@code {
    private bool _loading = true;
    private string? _error;
    private List<Movie> _movies = [];
    private const string CacheKey = "Movies_Index_List";

    protected override async Task OnInitializedAsync()
    {
        if (AppState.TryTakeFromJson<GetMoviesResponse>(CacheKey, out var cached) && cached is not null)
        {
            _movies = cached.Movies ?? [];
            _loading = false;
            return;
        }
        await LoadAsync();
        AppState.RegisterOnPersisting(async () =>
        {
            AppState.PersistAsJson(CacheKey, new GetMoviesResponse { Movies = _movies });
            await Task.CompletedTask;
        });
    }

    private async Task LoadAsync()
    {
        _loading = true;
        _error = null;
        try
        {
            var res = await Movies.GetAsync(new GetMoviesRequest());
            _movies = res.Movies;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task DeleteAsync(int id)
    {
        try
        {
            var success = await Movies.DeleteAsync(new DeleteMovieRequest { Id = id });
            if (success) await LoadAsync();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private void GoToCreate() => Nav.NavigateTo("/movies/create");
    private void GoToEdit(int id) => Nav.NavigateTo($"/movies/edit/{id}");
}
