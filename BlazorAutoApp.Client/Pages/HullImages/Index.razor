@page "/hull-images"

@using Microsoft.AspNetCore.Components.Forms
@using System.IO
@inject IJSRuntime JS
@inject IHullImagesApi Api

@* Dev Tools: isolated, expandable, starts collapsed (no Reload button) *@
<div class="devtools-container">
    <button class="btn btn-sm btn-secondary devtools-toggle" @onclick="ToggleDevTools" disabled="@_uploading" title="@(_uploading ? "Upload in progress" : null)">@(_devToolsOpen ? "Close Dev Tools" : "Open Dev Tools")</button>
    @if (_devToolsOpen)
    {
        <div class="card devtools-panel" style="min-width: 260px;">
            <div class="card-header py-2 d-flex justify-content-between align-items-center">
                <strong>Dev Tools</strong>
                <button class="btn btn-sm btn-outline-light" title="Close" @onclick="ToggleDevTools">‚úï</button>
            </div>
            <div class="card-body py-2">
                <!-- Mode toggle -->
                <div class="form-check form-switch mb-2">
                    <input class="form-check-input" type="checkbox" role="switch" id="chunkSwitch" @bind="_useChunked" disabled="@_uploading" />
                    <label class="form-check-label" for="chunkSwitch">Mode: <strong>@(_useChunked ? "TUS" : "ONE SHOT")</strong></label>
                </div>

                <!-- Middle: Maintenance actions -->
                <div class="d-flex flex-wrap gap-2 mb-2">
                    <button class="btn btn-sm btn-outline-warning" @onclick="PruneMissing" disabled="@_uploading">Prune Missing</button>
                    <button class="btn btn-sm btn-outline-info" @onclick="TriggerVerify" disabled="@_uploading">Check Image Verification</button>
                </div>

                <!-- Bottom: Upload controls (dropdown triggers upload on change) -->
                <div class="d-flex flex-wrap gap-2 align-items-center mt-3">
                    <select class="form-select form-select-sm" style="width:auto; min-width: 220px;" value="@_selectedTestAsset" @onchange="OnTestAssetChanged" @onfocus="LoadTestAssetsIfNeeded" disabled="@_uploading">
                        <option value="" disabled selected>Upload test asset...</option>
                        @foreach (var f in _testAssets)
                        {
                            <option value="@f">@f</option>
                        }
                    </select>
                </div>
                @if (!string.IsNullOrEmpty(_pruneInfo))
                {
                    <div class="text-success small mt-2">@_pruneInfo</div>
                }
                @if (!string.IsNullOrEmpty(_verifyInfo))
                {
                    <div class="mt-2 small">@_verifyInfo</div>
                }
            </div>
        </div>
    }
</div>

@* Main header, then upload controls directly below *@
<div class="mb-2">
    <h1 class="mb-1">Hull Images</h1>
    <div class="d-flex flex-column">
        <div class="d-flex align-items-center gap-2">
            <InputFile id="fileInput" class="visually-hidden" OnChange="OnFilesSelected" multiple accept=".jpg,.jpeg,.png,.webp,.gif,.bmp,.tif,.tiff" />
            <InputFile id="verifyInput" class="visually-hidden" OnChange="VerifySelected" accept=".jpg,.jpeg,.png,.webp,.gif,.bmp,.tif,.tiff" />
            <button type="button" class="btn btn-primary" @onclick="TriggerFileDialog" disabled="@_uploading" title="@(_uploading ? "Upload in progress" : null)">
                <span class="me-1">üìÅ</span> Choose Files
            </button>
            @if (!string.IsNullOrEmpty(_selectedLabel))
            {
                <span class="text-muted small">@_selectedLabel</span>
            }
        </div>
        <p class="text-muted mb-0 mt-1">Images only. Max 10 GB per file.</p>
    </div>

    @if (!string.IsNullOrEmpty(_error))
    {
        <p class="text-danger">@_error</p>
    }
    @if (!string.IsNullOrEmpty(_info))
    {
        <p class="text-info">@_info</p>
    }
    @if (_uploading)
    {
        <div class="my-2">
            <div>Uploading: @_currentFileName (@FormatBytes(_bytesUploaded) / @FormatBytes(_currentTotalBytes))</div>
            <div class="progress" style="height: 1.25rem;">
                <div class="progress-bar" role="progressbar" style="width: @_progressPercent%" aria-valuenow="@_progressPercent" aria-valuemin="0" aria-valuemax="100">@_progressPercent%</div>
            </div>
            @if (_useChunked)
            {
                <div class="mt-2">
                    @if (!_paused)
                    {
                        <button class="btn btn-outline-warning me-2" @onclick="PauseChunked">Pause Upload</button>
                    }
                    else
                    {
                        <button class="btn btn-outline-success" @onclick="ResumeChunked">Resume Upload</button>
                        <span class="badge bg-warning text-dark ms-2 align-middle">Paused</span>
                    }
                </div>
            }
        </div>
    }
    
</div>

@if (_loading)
{
    <p>Loading...</p>
}
else if (_images.Count == 0)
{
    <p>No images yet.</p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Id</th>
            <th>Preview</th>
            <th>Name</th>
            <th>Size</th>
            <th>Actions</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var i in _images)
        {
            <tr>
                <td>@i.Id</td>
                <td style="width:150px">
                    <a href="@($"/hull-images/{i.Id}")" title="@i.OriginalFileName">
                        <img style="max-width:128px;height:auto;display:block;" class="rounded border" src="@($"api/hull-images/{i.Id}/thumbnail/128")" alt="@i.OriginalFileName" loading="lazy" onerror="this.onerror=null;this.src='data:image/svg+xml;utf8,<svg xmlns=\'http://www.w3.org/2000/svg\' width=\'128\' height=\'128\'><rect width=\'100%\' height=\'100%\' fill=\'#eee\'/><text x=\'50%\' y=\'50%\' dominant-baseline=\'middle\' text-anchor=\'middle\' fill=\'#999\' font-size=\'12\'>Missing</text></svg>';" />
                    </a>
                </td>
                <td>@i.OriginalFileName</td>
                <td>@FormatBytes(i.ByteSize)</td>
                <td>
                    <a class="btn btn-sm btn-outline-primary" href="@($"api/hull-images/{i.Id}/original")">Download</a>
                </td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private bool _loading = true;
    private bool _uploading = false;
    private bool _useChunked = true;
    private bool _devToolsOpen = false;
    private bool _paused = false;
    private bool _canPauseResume => _uploading && _useChunked && !_paused;
    // JS AbortController handles pause; no CTS needed
    private Guid? _currentCorrelationId;
    private Guid? _chunkSessionId;
    private string? _error;
    private string? _info;
    private string? _pruneInfo;
    private string _currentFileName = string.Empty;
    private long _bytesUploaded = 0;
    private long _currentTotalBytes = 0;
    private int _progressPercent => _currentTotalBytes > 0 ? (int)Math.Round(100.0 * _bytesUploaded / _currentTotalBytes) : 0;
    private List<HullImage> _images = new();
    private string _selectedLabel = string.Empty;
    private string? _verifyInfo;

    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task LoadAsync()
    {
        _loading = true;
        _error = null;
        try
        {
            var res = await Api.GetAsync(new GetHullImagesRequest());
            _images = res.Items;
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    // No gallery mode; thumbnails are shown in the table preview column.

    private async Task OnFilesSelected(InputFileChangeEventArgs e)
    {
        var files = e.GetMultipleFiles()?.ToList() ?? new List<IBrowserFile>();
        if (files.Count == 0)
        {
            _selectedLabel = string.Empty;
            return;
        }
        _selectedLabel = files.Count == 1 ? files[0].Name : $"{files.Count} files selected";
        foreach (var file in e.GetMultipleFiles())
        {
            if (_useChunked)
            {
                await UploadTusAsync(file);
            }
            else
            {
                await UploadSingleAsync(file);
            }
        }
        await LoadAsync();
    }

    private async Task TriggerFileDialog()
    {
        if (_uploading) return;
        try
        {
            var module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/tusUpload.js");
            await module.InvokeVoidAsync("triggerClick", "fileInput");
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private async Task TriggerVerify()
    {
        try
        {
            var module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/imgTools.js");
            await module.InvokeVoidAsync("triggerClick", "verifyInput");
        }
        catch (Exception ex)
        {
            _verifyInfo = $"Verify error: {ex.Message}";
        }
    }

    private async Task UploadSingleAsync(IBrowserFile file)
    {
        _error = null; _info = null; _uploading = true; _currentFileName = file.Name; _bytesUploaded = 0; _currentTotalBytes = file.Size;
        try
        {
            // Use a large read limit to support big files (10 GB)
            await using var stream = file.OpenReadStream(maxAllowedSize: 10_737_418_240);
            _ = await Api.UploadAsync(
                fileName: file.Name,
                contentType: file.ContentType,
                content: stream,
                size: file.Size,
                progress: new Progress<long>(uploaded => { _bytesUploaded = uploaded; InvokeAsync(StateHasChanged); }),
                ct: CancellationToken.None);
            _info = $"Uploaded {file.Name} ({FormatBytes(file.Size)})";
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _uploading = false;
        }
    }

    private async Task UploadTusAsync(IBrowserFile file)
    {
        _error = null; _info = null; _uploading = true; _currentFileName = file.Name; _bytesUploaded = 0; _currentTotalBytes = 0;
        try
        {
            if (!IsAllowedImage(file)) { _error = "Only images (jpg,jpeg,png,webp,gif,bmp,tif,tiff) are allowed"; _uploading = false; return; }
            var module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/tusUpload.js");
            var correlationId = Guid.NewGuid();
            _currentCorrelationId = correlationId;
            var sessionId = Guid.NewGuid();
            _chunkSessionId = sessionId;
            var dotNetRef = DotNetObjectReference.Create(this);
            var index = 0;
            // Start upload without awaiting; JS invokes progress and completion callbacks
            _ = module.InvokeVoidAsync("startTusUploadFromInput", sessionId.ToString(), "fileInput", index, "/api/hull-images/tus", correlationId.ToString(), 4, dotNetRef);
        }
        catch (Exception ex)
        {
            _error = ex.Message;
            _uploading = false;
            _paused = false;
            _chunkSessionId = null;
        }
    }

    private async Task PauseChunked()
    {
        if (_chunkSessionId is null) return;
        _paused = true;
        try
        {
            var module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/tusUpload.js");
            await module.InvokeVoidAsync("pauseTusUpload", _chunkSessionId.ToString());
        }
        catch { }
    }

    private async Task ResumeChunked()
    {
        if (!_paused || _chunkSessionId is null) return;
        _paused = false;
        _uploading = true;
        StateHasChanged();
        try
        {
            var module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/tusUpload.js");
            await module.InvokeVoidAsync("resumeTusUpload", _chunkSessionId.ToString());
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private static string SessionKey(string fileName) => $"hullimg:session:{fileName}";

    private static readonly string[] AllowedExt = new[] { ".jpg", ".jpeg", ".png", ".webp", ".gif", ".bmp", ".tif", ".tiff" };
    private static bool IsAllowedImage(IBrowserFile file)
    {
        var name = file.Name ?? string.Empty;
        var okExt = AllowedExt.Any(ext => name.EndsWith(ext, StringComparison.OrdinalIgnoreCase));
        if (!okExt) return false;
        return true;
    }

    // Using IHullImagesApi for all transport; no HttpClient injected here.

    private void ToggleDevTools() => _devToolsOpen = !_devToolsOpen;
    private Task Reload() => LoadAsync();
    // Clear button removed from UI

    private async Task VerifySelected(InputFileChangeEventArgs e)
    {
        _verifyInfo = null;
        try
        {
            var module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/imgTools.js");
            var result = await module.InvokeAsync<ImgVerifyResult>("validateImageFromInput", "verifyInput");
            if (result is not null && result.ok)
            {
                _verifyInfo = $"Valid image: {result.name} ({(string.IsNullOrWhiteSpace(result.type) ? "unknown" : result.type)}), {result.width}x{result.height}, {result.size} bytes";
            }
            else
            {
                _verifyInfo = $"Invalid image: {result?.error ?? "Unknown error"}";
            }
        }
        catch (Exception ex)
        {
            _verifyInfo = $"Verify error: {ex.Message}";
        }
    }

    private record ImgVerifyResult(bool ok, int width, int height, string? type, string? name, long size, string? error);

    private List<string> _testAssets = new();
    private string? _selectedTestAsset;

    private async Task LoadTestAssetsIfNeeded()
    {
        if (_testAssets.Count > 0) return;
        try
        {
            var items = await Api.ListTestAssetsAsync();
            _testAssets = items.ToList();
        }
        catch (Exception ex)
        {
            _error = $"Failed to load test assets: {ex.Message}";
        }
    }

    private async Task OnTestAssetChanged(ChangeEventArgs e)
    {
        if (_uploading) return;
        _selectedTestAsset = e?.Value?.ToString();
        if (!string.IsNullOrWhiteSpace(_selectedTestAsset))
        {
            await UploadSelectedTestAsset();
        }
    }

    private async Task UploadSelectedTestAsset()
    {
        if (string.IsNullOrWhiteSpace(_selectedTestAsset)) return;
        try
        {
            var path = "/test-assets/" + Uri.EscapeDataString(_selectedTestAsset);
            var contentType = GuessContentType(_selectedTestAsset);
            _error = null; _info = null;
            _uploading = true; _currentFileName = _selectedTestAsset; _bytesUploaded = 0; _currentTotalBytes = 0; // unknown until fetched
            if (_useChunked)
            {
                var module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/tusUpload.js");
                var correlationId = Guid.NewGuid();
                _currentCorrelationId = correlationId;
                var sessionId = Guid.NewGuid();
                _chunkSessionId = sessionId;
                var dotNetRef = DotNetObjectReference.Create(this);
                _ = module.InvokeVoidAsync("startTusUploadFromUrl", sessionId.ToString(), path, _selectedTestAsset, contentType, "/api/hull-images/tus", correlationId.ToString(), 4, dotNetRef);
            }
            else
            {
                // Fallback to one-shot via HttpClient
                var module = await JS.InvokeAsync<IJSObjectReference>("import", "/js/tusUpload.js");
                var base64 = await module.InvokeAsync<string>("fetchAsBase64", path);
                if (string.IsNullOrWhiteSpace(base64)) { _error = $"Test asset not found at {path}"; return; }
                var data = Convert.FromBase64String(base64);
                _currentTotalBytes = data.LongLength;
                await using var ms = new MemoryStream(data);
                _ = await Api.UploadAsync(_selectedTestAsset, contentType, ms, data.LongLength,
                    new Progress<long>(uploaded => { _bytesUploaded = uploaded; InvokeAsync(StateHasChanged); }),
                    CancellationToken.None);
                _info = $"Uploaded {_selectedTestAsset} ({FormatBytes(data.LongLength)})";
                await LoadAsync();
            }
            if (!_useChunked) await LoadAsync();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            if (!_useChunked)
            {
                _uploading = false;
                _selectedTestAsset = string.Empty;
            }
        }
    }

    private static string GuessContentType(string? fileName)
    {
        if (string.IsNullOrWhiteSpace(fileName)) return "application/octet-stream";
        var ext = Path.GetExtension(fileName).ToLowerInvariant();
        return ext switch
        {
            ".jpg" or ".jpeg" => "image/jpeg",
            ".png" => "image/png",
            ".gif" => "image/gif",
            ".webp" => "image/webp",
            ".bmp" => "image/bmp",
            ".tif" or ".tiff" => "image/tiff",
            _ => "application/octet-stream"
        };
    }

    private async Task PruneMissing()
    {
        try
        {
            var removed = await Api.PruneMissingAsync();
            _pruneInfo = $"Pruned {removed} missing entr" + (removed == 1 ? "y" : "ies");
            await LoadAsync();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    [JSInvokable]
    public Task ReportTusProgress(long uploaded)
    {
        _bytesUploaded = uploaded;
        InvokeAsync(StateHasChanged);
        return Task.CompletedTask;
    }

    [JSInvokable]
    public Task OnTusInit(long total)
    {
        _currentTotalBytes = total;
        InvokeAsync(StateHasChanged);
        return Task.CompletedTask;
    }

    [JSInvokable]
    public async Task OnTusCompleted()
    {
        try
        {
            if (_currentCorrelationId is Guid corr)
            {
                var created = await Api.GetByCorrelationIdAsync(corr);
                if (created is not null)
                {
                    _info = $"Uploaded {_currentFileName} via TUS ({FormatBytes(_bytesUploaded)}) (Id {created.Id})";
                    await LoadAsync();
                }
            }
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _uploading = false;
            _paused = false;
            // reset Dev Tools dropdown selection to placeholder
            _selectedTestAsset = string.Empty;
            StateHasChanged();
        }
    }

    private static string FormatBytes(long bytes)
    {
        const long KB = 1024;
        const long MB = KB * 1024;
        const long GB = MB * 1024;
        if (bytes >= GB) return $"{bytes / (double)GB:0.#} GB";
        if (bytes >= MB) return $"{bytes / (double)MB:0.#} MB";
        if (bytes >= KB) return $"{bytes / (double)KB:0.#} KB";
        return $"{bytes} B";
    }
}

