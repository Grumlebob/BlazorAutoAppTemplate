@page "/hull-images/{Id:int}"

@inject IHullImagesApi Api
@inject NavigationManager Nav

<h1 class="text-2xl font-semibold mb-3">Image Details</h1>

@if (_loading)
{
    <p>Loading...</p>
}
else if (_error is not null)
{
    <p class="text-red-600">@_error</p>
}
else if (_image is null)
{
    <p>Not found.</p>
}
else
{
    <div class="mb-3 flex items-center gap-2">
        <a class="inline-flex items-center rounded-md bg-gray-100 px-3 py-1.5 text-sm font-medium text-gray-700 hover:bg-gray-200" href="@_returnUrl">Back</a>
        <button class="inline-flex items-center rounded-md bg-red-600 px-3 py-1.5 text-sm font-medium text-white hover:bg-red-700" @onclick="Delete">Delete</button>
    </div>

    <div class="grid grid-cols-1 md:grid-cols-2 gap-4">
        <div>
            <img class="w-full max-w-md md:max-w-full h-auto rounded border mx-auto"
                 src="@($"/api/hull-images/{_image.Id}/thumbnail/512")"
                 srcset="@($"/api/hull-images/{_image.Id}/thumbnail/256") 256w, @($"/api/hull-images/{_image.Id}/thumbnail/512") 512w, @($"/api/hull-images/{_image.Id}/thumbnail/768") 768w"
                 sizes="(max-width: 640px) 100vw, (max-width: 768px) 50vw, 512px"
                 alt="@_image.OriginalFileName" />
        </div>
        <div>
            <dl class="grid grid-cols-3 gap-x-4 gap-y-2 text-sm">
                <dt class="text-gray-500">Id</dt><dd class="col-span-2 text-gray-900">@_image.Id</dd>
                <dt class="text-gray-500">Name</dt><dd class="col-span-2 break-all text-gray-900">@_image.OriginalFileName</dd>
                <dt class="text-gray-500">Vessel</dt><dd class="col-span-2 text-gray-900">@_image.VesselName</dd>
                <dt class="text-gray-500">AI Score</dt><dd class="col-span-2 text-gray-900">@_image.AiHullScore.ToString("0.00")</dd>
                <dt class="text-gray-500">Size</dt><dd class="col-span-2 text-gray-900">@FormatBytes(_image.ByteSize)</dd>
                @if (_image.Width.HasValue && _image.Height.HasValue)
                {
                    <dt class="text-gray-500">Dimensions</dt><dd class="col-span-2 text-gray-900">@_image.Width x @_image.Height</dd>
                }
                <dt class="text-gray-500">Type</dt><dd class="col-span-2 text-gray-900">@_image.ContentType</dd>
                <dt class="text-gray-500">SHA256</dt><dd class="col-span-2 break-all text-gray-900">@_image.Sha256</dd>
                <dt class="text-gray-500">Created</dt><dd class="col-span-2 text-gray-900">@_image.CreatedAtUtc.ToString("u")</dd>
            </dl>
            <a class="inline-flex items-center rounded-md border border-blue-600 px-3 py-1.5 text-sm font-medium text-blue-700 hover:bg-blue-50 mr-2" href="@($"/api/hull-images/{_image.Id}/original")" download>Download Original</a>
            <a class="inline-flex items-center rounded-md border border-gray-400 px-3 py-1.5 text-sm font-medium text-gray-700 hover:bg-gray-50" href="@($"/api/hull-images/{_image.Id}/original")" target="_blank">Open Original</a>
        </div>
    </div>
}

@code {
    [Parameter] public int Id { get; set; }

    private bool _loading = true;
    private string? _error;
    private GetHullImageResponse? _image;
    private string _returnUrl = "/hull-images";

    protected override async Task OnParametersSetAsync()
    {
        _loading = true;
        _error = null;
        try
        {
            // Parse optional return URL from query string
            try
            {
                var uri = new Uri(Nav.Uri);
                var q = uri.Query;
                if (!string.IsNullOrWhiteSpace(q))
                {
                    if (q.StartsWith("?")) q = q.Substring(1);
                    foreach (var part in q.Split('&', StringSplitOptions.RemoveEmptyEntries))
                    {
                        var kv = part.Split('=', 2);
                        if (kv.Length == 2 && string.Equals(kv[0], "return", StringComparison.OrdinalIgnoreCase))
                        {
                            var val = Uri.UnescapeDataString(kv[1]);
                            if (!string.IsNullOrWhiteSpace(val)) _returnUrl = val;
                        }
                    }
                }
            }
            catch { /* ignore parse errors; use default */ }
            _image = await Api.GetByIdAsync(new GetHullImageRequest { Id = Id });
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            _loading = false;
        }
    }

    private async Task Delete()
    {
        try
        {
            var ok = await Api.DeleteAsync(Id);
            if (ok) Nav.NavigateTo("/hull-images");
            else _error = "Delete failed or not found";
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private static string FormatBytes(long bytes)
    {
        const long KB = 1024;
        const long MB = KB * 1024;
        const long GB = MB * 1024;
        if (bytes >= GB) return $"{bytes / (double)GB:0.#} GB";
        if (bytes >= MB) return $"{bytes / (double)MB:0.#} MB";
        if (bytes >= KB) return $"{bytes / (double)KB:0.#} KB";
        return $"{bytes} B";
    }
}
