@page "/inspection/{Id:guid}/flow"

<PageTitle>Inspection Flow</PageTitle>

@if (_checking)
{
    <p class="text-black">Checking access…</p>
}
else if (!_verified)
{
    <p class="text-black">Access denied. Redirecting to verification…</p>
}
else
{
    <h1 class="text-2xl font-semibold text-black mb-4">Inspection Flow</h1>
    <EditForm Model="@this">
        <div class="max-w-xl space-y-4">
            <div>
                <label class="block text-black mb-1">Inspection Type</label>
                <select class="border rounded w-full px-3 py-2 text-black" value="@_type" @onchange="OnTypeChanged">
                    @foreach (var it in Enum.GetValues<BlazorAutoApp.Core.Features.Inspections.InspectionFlow.InspectionType>())
                    {
                        <option value="@it">@it</option>
                    }
                </select>
            </div>
            <div>
                <label class="block text-black mb-1">Vessel Name</label>
                <input class="border rounded w-full px-3 py-2 text-black" list="vesselList" value="@_vesselName" @onchange="OnVesselNameChanged" placeholder="Search vessel name" />
                <datalist id="vesselList">
                    @foreach (var v in _vesselNames)
                    {
                        <option value="@v"></option>
                    }
                </datalist>
            </div>
            <div>
                <label class="block text-black mb-2">Vessel Parts</label>
                @foreach (var cat in _catalog)
                {
                    <div class="mb-2">
                        <div class="font-medium text-black">@cat.Category</div>
                        <div class="grid grid-cols-2 gap-1 mt-1">
                            @foreach (var part in cat.Parts)
                            {
                                var code = $"{cat.Category}::{part}";
                                <label class="inline-flex items-center text-black">
                                    <input type="checkbox" class="mr-2" checked="@_selected.Contains(code)" @onchange="(e)=>TogglePart(code, e.Value)" />
                                    <span class="mr-1 text-xs" aria-hidden="true">@IconForPart(cat.Category, part)</span>
                                    <span>@part</span>
                                </label>
                            }
                        </div>
                    </div>
                }
            </div>
            @if (_selected.Count > 0)
            {
                <div class="mt-4">
                    <div class="text-black font-medium mb-2">Part Details</div>
                    @foreach (var partCodeSelected in _selected)
                    {
                        var vp = _vesselParts.FirstOrDefault(v => v.PartCode == partCodeSelected);
                        if (vp?.Id is int vpId)
                        {
                            <div class="mb-6">
                                <div class="text-black font-semibold mb-1">@partCodeSelected</div>
                                <BlazorAutoApp.Client.Pages.Inspection.Components.VesselPartForm VesselPartId="@vpId" />
                            </div>
                        }
                        else
                        {
                            <div class="text-gray-600">Saving to create part container...</div>
                        }
                    }
                </div>
            }
            @if (!string.IsNullOrWhiteSpace(_error)) { <div class="text-red-600">@_error</div> }
            @if (!string.IsNullOrWhiteSpace(_info)) { <div class="text-green-700">@_info</div> }
        </div>
    </EditForm>
}

@code {
    [Parameter] public Guid Id { get; set; }
    [Inject] private IVerifyInspectionEmailApi Api { get; set; } = default!;
    [Inject] private IInspectionFlowApi FlowApi { get; set; } = default!;
    [Inject] private NavigationManager Nav { get; set; } = default!;

    private bool _checking = true;
    private bool _verified;
    private string _vesselName = string.Empty;
    private BlazorAutoApp.Core.Features.Inspections.InspectionFlow.InspectionType _type = BlazorAutoApp.Core.Features.Inspections.InspectionFlow.InspectionType.GoProInspection;
    private HashSet<string> _selected = new();
    private record VesselPartVm(int? Id, string PartCode);
    private List<VesselPartVm> _vesselParts = new();
    private string? _error;
    private string? _info;
    private List<string> _vesselNames = new();
    private (string Category, string[] Parts)[] _catalog = new[]
    {
        ("bow", new[]{"Port","Starboard","Flat Bottom"}),
        ("midships", new[]{"Front Port","Rear Port","Front Starboard","Rear Starboard","Front Flat Bottom","Rear Flat Bottom"}),
        ("aft", new[]{"Port","Starboard","Flat Bottom"}),
        ("rudder", new[]{"Port-Up","Port-Down","Starboard-Up","Starboard-Down"}),
        ("propeller", new[]{"Propeller","Rope Guard","Shaft"}),
        ("other", new[]{"Sea Chest Grating","Bilge Keels","ICCP","Aft Thruster","Keel Block Mark"})
    };

    private static string IconForPart(string category, string part)
    {
        var p = part.ToLowerInvariant();
        var icons = new List<string>();
        if (p.Contains("front")) icons.Add("⬆️");
        if (p.Contains("rear")) icons.Add("⬇️");
        if (p.Contains("port")) icons.Add("⬅️");
        if (p.Contains("starboard")) icons.Add("➡️");
        if (p.Contains("flat bottom") || p.Contains("bottom")) icons.Add("⬛");

        var cat = category.ToLowerInvariant();
        if (cat == "rudder" || p.Contains("rudder")) icons.Add("🧭");
        if (cat == "propeller" || p.Contains("propeller") || p.Contains("thruster")) icons.Add("🌀");
        if (p.Contains("rope")) icons.Add("🧵");
        if (p.Contains("shaft")) icons.Add("⚙️");
        if (p.Contains("sea chest")) icons.Add("#️⃣");
        if (p.Contains("bilge")) icons.Add("🪝");
        if (p.Contains("iccp")) icons.Add("🔋");
        if (p.Contains("keel")) icons.Add("📏");

        if (icons.Count == 0) icons.Add("🚢");
        return string.Join(string.Empty, icons);
    }

    protected override async Task OnInitializedAsync()
    {
        var res = await Api.GetStatusAsync(Id);
        _verified = res.Verified;
        _checking = false;
        if (!_verified)
        {
            await Task.Delay(300);
            Nav.NavigateTo($"/inspection/{Id}");
            return;
        }
        await LoadAsync();
        await LoadVesselNamesAsync();
    }

    private async Task LoadAsync()
    {
        try
        {
            var model = await FlowApi.GetAsync(Id);
            // Do not prefill vessel name in UI; leave for user selection
            _type = model.InspectionType;
            _selected = model.VesselParts.Select(vp => vp.PartCode).ToHashSet(StringComparer.Ordinal);
            _vesselParts = model.VesselParts.Select(vp => new VesselPartVm(vp.Id, vp.PartCode)).ToList();
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
    }

    private Task OnVesselNameChanged(ChangeEventArgs e)
    {
        _vesselName = e?.Value?.ToString() ?? string.Empty;
        return SaveFlowAsync();
    }

    private Task OnTypeChanged(ChangeEventArgs e)
    {
        var s = e?.Value?.ToString();
        if (!string.IsNullOrWhiteSpace(s) && Enum.TryParse<BlazorAutoApp.Core.Features.Inspections.InspectionFlow.InspectionType>(s, out var t))
        {
            _type = t;
            return SaveFlowAsync();
        }
        return Task.CompletedTask;
    }

    private async Task TogglePart(string code, object? value)
    {
        var isChecked = value is bool b && b;
        if (isChecked) _selected.Add(code); else _selected.Remove(code);
        if (!_vesselParts.Any(v => v.PartCode == code))
        {
            _vesselParts.Add(new VesselPartVm(null, code));
        }
        await SaveFlowAsync();
    }

    private async Task SaveFlowAsync()
    {
        _error = null; _info = null;
        try
        {
            var payload = new BlazorAutoApp.Core.Features.Inspections.InspectionFlow.UpsertInspectionFlowRequest
            {
                Id = Id,
                VesselName = _vesselName,
                InspectionType = _type,
                VesselParts = _selected.Select(code =>
                {
                    var existing = _vesselParts.FirstOrDefault(v => string.Equals(v.PartCode, code, StringComparison.Ordinal));
                    return new BlazorAutoApp.Core.Features.Inspections.InspectionFlow.InspectionVesselPartDto
                    {
                        Id = existing?.Id,
                        PartCode = code
                    };
                }).ToList()
            };
            var res = await FlowApi.UpsertAsync(payload);
            if (res.Success)
            {
                await LoadAsync();
            }
            else
            {
                _error = res.Error;
            }
        }
        catch (Exception ex)
        {
            _error = ex.Message;
        }
        finally
        {
            // no-op
        }
    }

    private async Task LoadVesselNamesAsync()
    {
        try
        {
            var res = await FlowApi.GetVesselsAsync();
            _vesselNames = res.Items.Select(x => x.Name).Distinct(StringComparer.Ordinal).OrderBy(s => s).ToList();
        }
        catch
        {
            _vesselNames = new();
        }
    }
}
